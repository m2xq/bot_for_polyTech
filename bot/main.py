import os
import uuid
import time
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    ConversationHandler, filters, ContextTypes
)
from dotenv import load_dotenv

from db import SessionLocal, engine, Base
from models import User, Subject, Lab, LabFile

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ---
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ñ–∞–π–ª–æ–≤
UPLOAD_DIR = "/app/lab_files"
os.makedirs(UPLOAD_DIR, exist_ok=True)

# --- –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π ---
def initialize_database():
    print("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    max_retries = 10  # –£–≤–µ–ª–∏—á–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
    for attempt in range(max_retries):
        try:
            print(f"‚è≥ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries} —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü...")
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –º–æ–¥–µ–ª–∏ —á—Ç–æ–±—ã –æ–Ω–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ Base
            from models import User, Subject, Lab, LabFile
            
            # –°–æ–∑–¥–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
            Base.metadata.create_all(bind=engine)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
            from sqlalchemy import inspect
            inspector = inspect(engine)
            tables = inspector.get_table_names()
            
            expected_tables = ['users', 'subjects', 'labs', 'lab_files']
            missing_tables = [table for table in expected_tables if table not in tables]
            
            if missing_tables:
                print(f"‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–∞–±–ª–∏—Ü—ã: {missing_tables}")
                if attempt < max_retries - 1:
                    print("‚è≥ –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                    time.sleep(5)
                    continue
                else:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã")
                    return False
            else:
                print(f"‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã: {tables}")
                return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
            if attempt < max_retries - 1:
                print("‚è≥ –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                time.sleep(5)
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫")
                return False

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
print("üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î...")
if not initialize_database():
    print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã –≤ –ë–î")
    exit(1)

print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤ ---
ASK_SUBJECT = 1
ASK_NOTIFY = 2
ASK_LAB_SUBJECT = 3
ASK_LAB_TITLE = 4
ASK_LAB_DESC = 5
ASK_LAB_DEADLINE = 6
ASK_LAB_FILES = 7
ASK_EDIT_LAB = 8
ASK_EDIT_SUBJECT = 9

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
def get_main_keyboard(is_admin=False):
    buttons = [
        ["–ú–æ–∏ –ø—Ä–µ–¥–º–µ—Ç—ã"],
        ["–ê–∫—Ç—É–∞–ª—å–Ω–æ"]
    ]
    if is_admin:
        buttons.append(["–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"])
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True)

# --- –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å ---
def get_admin_keyboard():
    keyboard = [
        [InlineKeyboardButton("–û–ø–æ–≤–µ—Å—Ç–∏—Ç—å", callback_data="notify")],
        [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç", callback_data="add_subject")],
        [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—É—é", callback_data="add_lab")],
        [InlineKeyboardButton("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏", callback_data="manage_subjects")],
        [InlineKeyboardButton("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–º–∏", callback_data="manage_labs")]
    ]
    return InlineKeyboardMarkup(keyboard)

# --- –°—Ç–∞—Ä—Ç ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    session = SessionLocal()
    tg_id = update.effective_user.id
    user = session.query(User).filter_by(tg_id=tg_id).first()

    if not user:
        user = User(tg_id=tg_id, is_admin=(tg_id == ADMIN_ID))
        session.add(user)
        session.commit()
    else:
        user.is_admin = (tg_id == ADMIN_ID)
        session.commit()

    keyboard = get_main_keyboard(user.is_admin)
    text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!"
    
    if user.is_admin:
        text += "\n–í—ã –∞–¥–º–∏–Ω, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ."
        await update.message.reply_text(text, reply_markup=keyboard)
        await update.message.reply_text("–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:", reply_markup=get_admin_keyboard())
    else:
        await update.message.reply_text(text, reply_markup=keyboard)
    
    session.close()

# --- –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å ---
async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    session = SessionLocal()
    tg_id = update.effective_user.id
    user = session.query(User).filter_by(tg_id=tg_id).first()
    
    if user and user.is_admin:
        await update.message.reply_text("–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:", reply_markup=get_admin_keyboard())
    else:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.")
    
    session.close()

# --- –ú–æ–∏ –ø—Ä–µ–¥–º–µ—Ç—ã ---
async def my_subjects(update: Update, context: ContextTypes.DEFAULT_TYPE):
    session = SessionLocal()
    subjects = session.query(Subject).all()
    if not subjects:
        await update.message.reply_text("–ü–æ–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–µ—Ç.")
    else:
        keyboard = [[InlineKeyboardButton(s.name, callback_data=f"subject:{s.id}")] for s in subjects]
        await update.message.reply_text("–í–∞—à–∏ –ø—Ä–µ–¥–º–µ—Ç—ã:", reply_markup=InlineKeyboardMarkup(keyboard))
    session.close()

# --- –ö–Ω–æ–ø–∫–∏ Inline –¥–ª—è –∞–¥–º–∏–Ω–∞ –∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ ---
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data.startswith("subject:"):
        await show_subject_details(query, context)
        
    elif data.startswith("lab:"):
        await show_lab_details(query, context)

    elif data.startswith("lab_files:"):
        await show_lab_files(query, context)
        
    elif data.startswith("download_file:"):  # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        await download_lab_file(query, context)
        
    elif data.startswith("delete_lab:"):
        await delete_lab(query, context)
        
    elif data.startswith("edit_lab:"):
        await edit_lab_start(query, context)
        
    elif data.startswith("delete_subject:"):
        await delete_subject(query, context)
        
    elif data.startswith("edit_subject:"):
        await edit_subject_start(query, context)

    elif data == "add_subject":
        await add_subject_start(update, context)
    elif data == "notify":
        await notify_start(update, context)
    elif data == "add_lab":
        await add_lab_start(update, context)
    elif data == "manage_subjects":
        await manage_subjects(query, context)
    elif data == "manage_labs":
        await manage_labs(query, context)

# --- –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ ---
async def show_subject_details(query, context):
    session = SessionLocal()
    sid = int(query.data.split(":")[1])
    subject = session.query(Subject).get(sid)
    
    if subject:
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π
        keyboard = []
        for lab in subject.labs:
            keyboard.append([InlineKeyboardButton(lab.title, callback_data=f"lab:{lab.id}")])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω
        tg_id = query.from_user.id
        user = session.query(User).filter_by(tg_id=tg_id).first()
        
        if user and user.is_admin:
            keyboard.append([
                InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_subject:{subject.id}"),
                InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_subject:{subject.id}")
            ])
        
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–µ–¥–º–µ—Ç–∞–º", callback_data="back_to_subjects")])
        
        if not subject.labs:
            await query.edit_message_text(
                f"üìö {subject.name}\n\n–ü–æ–∫–∞ –Ω–µ—Ç –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö —Ä–∞–±–æ—Ç.",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            await query.edit_message_text(
                f"üìö {subject.name}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—É—é:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
    session.close()

# --- –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π ---
async def show_lab_details(query, context):
    session = SessionLocal()
    lid = int(query.data.split(":")[1])
    lab = session.query(Lab).get(lid)
    
    if lab:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ª–∞–±–µ
        text = f"üìå <b>{lab.title}</b>\n\n"
        text += f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{lab.desc or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\n\n"
        text += f"‚è≥ <b>–î–µ–¥–ª–∞–π–Ω:</b> {lab.deadline or '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n\n"
        text += f"üìö <b>–ü—Ä–µ–¥–º–µ—Ç:</b> {lab.subject.name}"
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
        keyboard = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω
        tg_id = query.from_user.id
        user = session.query(User).filter_by(tg_id=tg_id).first()
        
        if user and user.is_admin:
            keyboard.extend([
                [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_lab:{lab.id}")],
                [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_lab:{lab.id}")]
            ])
        
        keyboard.extend([
            [InlineKeyboardButton("üìé –§–∞–π–ª—ã –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π", callback_data=f"lab_files:{lab.id}")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–µ–¥–º–µ—Ç—É", callback_data=f"subject:{lab.subject.id}")]
        ])
        
        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
    session.close()

# --- –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∞–π–ª—ã –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π ---
async def show_lab_files(query, context):
    session = SessionLocal()
    lid = int(query.data.split(":")[1])
    lab = session.get(Lab, lid)
    
    if lab and lab.files:
        text = f"üìÅ –§–∞–π–ª—ã –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π '{lab.title}':\n\n"
        
        keyboard = []
        for lab_file in lab.files:
            file_size_kb = lab_file.file_size / 1024 if lab_file.file_size else 0
            file_size_text = f"{file_size_kb:.1f} KB" if file_size_kb < 1024 else f"{file_size_kb/1024:.1f} MB"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤
            file_icons = {
                '.pdf': 'üìï', '.docx': 'üìò', '.txt': 'üìÑ',
                '.xlsx': 'üìä', '.xls': 'üìä', '.zip': 'üì¶',
                '.py': 'üêç', '.pcap': 'üåê', '.tar': 'üì¶',
                '.jpg': 'üñºÔ∏è', '.jpeg': 'üñºÔ∏è', '.png': 'üñºÔ∏è'
            }
            
            file_ext = os.path.splitext(lab_file.file_name)[1].lower()
            icon = file_icons.get(file_ext, 'üìÑ')
            
            text += f"{icon} {lab_file.file_name} ({file_size_text})\n"
            keyboard.append([InlineKeyboardButton(
                f"{icon} –°–∫–∞—á–∞—Ç—å {lab_file.file_name}", 
                callback_data=f"download_file:{lab_file.id}"
            )])
        
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π", callback_data=f"lab:{lab.id}")])
        
        await query.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        await query.message.reply_text("üì≠ –î–ª—è —ç—Ç–æ–π –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤.")
    
    session.close()

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏ ---
async def download_file_to_server(file_id, file_name, context):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –∏–∑ Telegram –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä"""
    try:
        print(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞: {file_name}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –æ—Ç Telegram
        file = await context.bot.get_file(file_id)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        file_extension = os.path.splitext(file_name)[1]
        unique_filename = f"{uuid.uuid4()}{file_extension}"
        file_path = os.path.join(UPLOAD_DIR, unique_filename)
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        await file.download_to_drive(file_path)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–ª—Å—è
        if os.path.exists(file_path):
            file_size = os.path.getsize(file_path)
            print(f"‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {file_path} ({file_size} –±–∞–π—Ç)")
            return unique_filename, file_path
        else:
            print(f"‚ùå –§–∞–π–ª –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω: {file_path}")
            return None, None
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_name}: {e}")
        return None, None

async def send_file_from_server(update, file_path, file_name):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if not os.path.exists(file_path):
            await update.message.reply_text(f"‚ùå –§–∞–π–ª {file_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
            return False
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        with open(file_path, 'rb') as file:
            file_name_lower = file_name.lower()
            
            if file_name_lower.endswith(('.jpg', '.jpeg', '.png', '.gif')):
                await update.message.reply_photo(photo=file, caption=f"üì∏ {file_name}")
            elif file_name_lower.endswith(('.mp4', '.avi', '.mov', '.mkv')):
                await update.message.reply_video(video=file, caption=f"üé• {file_name}")
            else:
                await update.message.reply_document(document=file, caption=f"üìÑ {file_name}")
        
        print(f"‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {file_name}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ {file_name}: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ {file_name}")
        return False

# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏ ---
async def manage_subjects(query, context):
    session = SessionLocal()
    subjects = session.query(Subject).all()
    
    if not subjects:
        await query.message.reply_text("–ù–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
    else:
        keyboard = []
        for subject in subjects:
            keyboard.append([
                InlineKeyboardButton(f"‚úèÔ∏è {subject.name}", callback_data=f"edit_subject:{subject.id}"),
                InlineKeyboardButton(f"üóëÔ∏è", callback_data=f"delete_subject:{subject.id}")
            ])
        
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")])
        
        await query.edit_message_text(
            "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏:\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    session.close()

# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–º–∏ ---
async def manage_labs(query, context):
    session = SessionLocal()
    labs = session.query(Lab).all()
    
    if not labs:
        await query.message.reply_text("–ù–µ—Ç –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
    else:
        keyboard = []
        for lab in labs:
            keyboard.append([
                InlineKeyboardButton(f"‚úèÔ∏è {lab.title}", callback_data=f"edit_lab:{lab.id}"),
                InlineKeyboardButton(f"üóëÔ∏è", callback_data=f"delete_lab:{lab.id}")
            ])
        
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")])
        
        await query.edit_message_text(
            "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–º–∏:\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—É—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    session.close()

# --- –£–¥–∞–ª–∏—Ç—å –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—É—é ---
async def delete_lab(query, context):
    session = SessionLocal()
    lid = int(query.data.split(":")[1])
    lab = session.query(Lab).get(lid)
    
    if lab:
        lab_title = lab.title
        subject_id = lab.subject_id
        session.delete(lab)
        session.commit()
        await query.message.reply_text(f"–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è '{lab_title}' —É–¥–∞–ª–µ–Ω–∞!")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥–º–µ—Ç—É
        subject = session.query(Subject).get(subject_id)
        if subject:
            await show_subject_details(query, context)
    else:
        await query.message.reply_text("–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    
    session.close()

# --- –£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç ---
async def delete_subject(query, context):
    session = SessionLocal()
    sid = int(query.data.split(":")[1])
    subject = session.query(Subject).get(sid)
    
    if subject:
        subject_name = subject.name
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
        for lab in subject.labs:
            session.delete(lab)
        session.delete(subject)
        session.commit()
        await query.message.reply_text(f"–ü—Ä–µ–¥–º–µ—Ç '{subject_name}' –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã!")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        await manage_subjects(query, context)
    else:
        await query.message.reply_text("–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    
    session.close()

# --- –ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π ---
async def edit_lab_start(query, context):
    session = SessionLocal()
    lid = int(query.data.split(":")[1])
    lab = session.query(Lab).get(lid)
    
    if lab:
        context.user_data['edit_lab_id'] = lid
        keyboard = [
            [InlineKeyboardButton("üìù –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data="edit_lab_title")],
            [InlineKeyboardButton("üìÑ –û–ø–∏—Å–∞–Ω–∏–µ", callback_data="edit_lab_desc")],
            [InlineKeyboardButton("‚è≥ –î–µ–¥–ª–∞–π–Ω", callback_data="edit_lab_deadline")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"lab:{lid}")]
        ]
        
        await query.edit_message_text(
            f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π: {lab.title}\n\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    session.close()
    return ASK_EDIT_LAB

# --- –ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ ---
async def edit_subject_start(query, context):
    session = SessionLocal()
    sid = int(query.data.split(":")[1])
    subject = session.query(Subject).get(sid)
    
    if subject:
        context.user_data['edit_subject_id'] = sid
        await query.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ '{subject.name}':")
        return ASK_EDIT_SUBJECT
    session.close()

# --- –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞ ---
async def edit_subject_save(update: Update, context: ContextTypes.DEFAULT_TYPE):
    session = SessionLocal()
    subject_id = context.user_data.get('edit_subject_id')
    new_name = update.message.text.strip()
    
    if subject_id and new_name:
        subject = session.query(Subject).get(subject_id)
        if subject:
            old_name = subject.name
            subject.name = new_name
            session.commit()
            await update.message.reply_text(f"–ü—Ä–µ–¥–º–µ—Ç '{old_name}' –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤ '{new_name}'!")
        else:
            await update.message.reply_text("–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    else:
        await update.message.reply_text("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
    
    context.user_data.clear()
    session.close()
    return ConversationHandler.END

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –Ω–∞–∑–∞–¥ ---
async def handle_back_buttons(query, context):
    data = query.data
    
    if data == "back_to_subjects":
        session = SessionLocal()
        subjects = session.query(Subject).all()
        if not subjects:
            await query.edit_message_text("–ü–æ–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–µ—Ç.")
        else:
            keyboard = [[InlineKeyboardButton(s.name, callback_data=f"subject:{s.id}")] for s in subjects]
            await query.edit_message_text("–í–∞—à–∏ –ø—Ä–µ–¥–º–µ—Ç—ã:", reply_markup=InlineKeyboardMarkup(keyboard))
        session.close()
        
    elif data == "back_to_admin":
        await query.edit_message_text("–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:", reply_markup=get_admin_keyboard())

# --- –ê–¥–º–∏–Ω: –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç ---
async def add_subject_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if query:
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:")
    else:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:")
    return ASK_SUBJECT

async def add_subject_save(update: Update, context: ContextTypes.DEFAULT_TYPE):
    session = SessionLocal()
    name = update.message.text.strip()
    if name:
        new_subj = Subject(name=name)
        session.add(new_subj)
        session.commit()
        await update.message.reply_text(f"–ü—Ä–µ–¥–º–µ—Ç '{name}' –¥–æ–±–∞–≤–ª–µ–Ω!")
    else:
        await update.message.reply_text("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
    session.close()
    return ConversationHandler.END

# --- –ê–¥–º–∏–Ω: –û–ø–æ–≤–µ—Å—Ç–∏—Ç—å ---
async def notify_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if query:
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:")
    else:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:")
    return ASK_NOTIFY

async def notify_send(update: Update, context: ContextTypes.DEFAULT_TYPE):
    session = SessionLocal()
    text = update.message.text
    users = session.query(User).all()
    sent_count = 0
    
    for u in users:
        try:
            await context.bot.send_message(u.tg_id, f"üì¢ –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞:\n{text}")
            sent_count += 1
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {u.tg_id}: {e}")
    
    await update.message.reply_text(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
    session.close()
    return ConversationHandler.END

# --- –ê–¥–º–∏–Ω: –î–æ–±–∞–≤–∏—Ç—å –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—É—é ---
async def add_lab_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    session = SessionLocal()
    subjects = session.query(Subject).all()
    if not subjects:
        query = update.callback_query
        if query:
            await query.message.reply_text("–ù–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π.")
        else:
            await update.message.reply_text("–ù–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π.")
        session.close()
        return ConversationHandler.END
    
    keyboard = [[InlineKeyboardButton(s.name, callback_data=f"lab_subj:{s.id}")] for s in subjects]
    
    query = update.callback_query
    if query:
        await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:", reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:", reply_markup=InlineKeyboardMarkup(keyboard))
    
    session.close()
    return ASK_LAB_SUBJECT

async def add_lab_subject(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    subject_id = int(query.data.split(":")[1])
    context.user_data['lab_subject_id'] = subject_id
    
    await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π:")
    return ASK_LAB_TITLE

async def add_lab_title(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['lab_title'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π:")
    return ASK_LAB_DESC

async def add_lab_desc(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['lab_desc'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π:")
    return ASK_LAB_DEADLINE

async def add_lab_deadline(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['lab_deadline'] = update.message.text
    await update.message.reply_text(
        "–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π (–µ—Å–ª–∏ –µ—Å—Ç—å). "
        "–ú–æ–∂–Ω–æ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤.\n"
        "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /done\n"
        "–ß—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip"
    )
    return ASK_LAB_FILES

async def add_lab_files(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if 'lab_files' not in context.user_data:
        context.user_data['lab_files'] = []
    
    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤
    supported_extensions = ['.txt', '.pdf', '.docx', '.xlsx', '.xls', '.zip', '.py', '.pcap', '.tar', '.jpg', '.jpeg', '.png']
    
    if update.message.document:
        file = update.message.document
        file_extension = os.path.splitext(file.file_name)[1].lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
        if file_extension not in supported_extensions:
            await update.message.reply_text(
                f"‚ùå –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ {file_extension} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.\n"
                f"üìã –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: {', '.join(supported_extensions)}"
            )
            return ASK_LAB_FILES
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        unique_filename, file_path = await download_file_to_server(
            file.file_id, 
            file.file_name, 
            context
        )
        
        if unique_filename and file_path:
            context.user_data['lab_files'].append({
                'file_id': file.file_id,
                'file_name': file.file_name,
                'file_size': file.file_size,
                'unique_filename': unique_filename,
                'file_path': file_path
            })
            await update.message.reply_text(f"‚úÖ –§–∞–π–ª '{file.file_name}' –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä!")
        else:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ '{file.file_name}'")
    
    elif update.message.photo:
        # –î–ª—è —Ñ–æ—Ç–æ –±–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        photo = update.message.photo[-1]
        unique_filename, file_path = await download_file_to_server(
            photo.file_id, 
            "photo.jpg", 
            context
        )
        
        if unique_filename and file_path:
            context.user_data['lab_files'].append({
                'file_id': photo.file_id,
                'file_name': 'photo.jpg',
                'file_size': photo.file_size,
                'unique_filename': unique_filename,
                'file_path': file_path
            })
            await update.message.reply_text("‚úÖ –§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä!")
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ")
    
    return ASK_LAB_FILES

#–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –ª–∞–±—ã
async def actual_labs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ –≤ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–º –≤–∏–¥–µ"""
    session = SessionLocal()
    
    try:
        subjects = session.query(Subject).all()
        
        if not subjects:
            await update.message.reply_text("üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö —Ä–∞–±–æ—Ç.")
            return
        
        message = "üìö <b>–ê–ö–¢–£–ê–õ–¨–ù–´–ï –õ–ê–ë–û–†–ê–¢–û–†–ù–´–ï</b>\n\n"
        
        for subject in subjects:
            if subject.labs:
                message += f"<b>üìñ {subject.name}</b>\n"
                
                for lab in subject.labs:
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–µ–¥–ª–∞–π–Ω (–µ—Å–ª–∏ –µ—Å—Ç—å)
                    deadline_text = f" | ‚è≥ {lab.deadline}" if lab.deadline else ""
                    message += f"   ‚Ä¢ {lab.title}{deadline_text}\n"
                
                message += "\n"
        
        await update.message.reply_text(message, parse_mode='HTML')
        
    except Exception as e:
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
        print(f"–û—à–∏–±–∫–∞ –≤ actual_labs: {e}")
    
    finally:
        session.close()

async def add_lab_finish(update: Update, context: ContextTypes.DEFAULT_TYPE):
    session = SessionLocal()
    
    subject_id = context.user_data.get('lab_subject_id')
    title = context.user_data.get('lab_title')
    desc = context.user_data.get('lab_desc')
    deadline = context.user_data.get('lab_deadline')
    files_data = context.user_data.get('lab_files', [])
    
    if subject_id and title:
        try:
            # –°–æ–∑–¥–∞–µ–º –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—É—é
            new_lab = Lab(
                title=title,
                desc=desc,
                deadline=deadline,
                subject_id=subject_id
            )
            session.add(new_lab)
            session.flush()  # –ü–æ–ª—É—á–∞–µ–º ID –Ω–æ–≤–æ–π –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö –≤ –ë–î
            for file_info in files_data:
                lab_file = LabFile(
                    lab_id=new_lab.id,
                    file_name=file_info['file_name'],
                    file_path=file_info['file_path'],
                    file_size=file_info['file_size']
                )
                session.add(lab_file)
            
            session.commit()
            
            text = f"‚úÖ –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è '{title}' –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n"
            text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {desc or '–Ω–µ—Ç'}\n"
            text += f"‚è≥ –î–µ–¥–ª–∞–π–Ω: {deadline or '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n"
            text += f"üìé –§–∞–π–ª–æ–≤: {len(files_data)}"
            
            await update.message.reply_text(text)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
            if files_data:
                files_list = "\n".join([f"‚Ä¢ {f['file_name']}" for f in files_data])
                await update.message.reply_text(f"üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:\n{files_list}")
            
        except Exception as e:
            session.rollback()
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π –≤ –ë–î: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –ë–î: {e}")
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω—ã –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –ø—Ä–µ–¥–º–µ—Ç –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π.")
    
    context.user_data.clear()
    session.close()
    return ConversationHandler.END

async def download_lab_file(query, context):
    session = SessionLocal()
    file_id = int(query.data.split(":")[1])
    lab_file = session.get(LabFile, file_id)
    
    if lab_file and lab_file.file_path:
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            success = await send_file_from_server(query, lab_file.file_path, lab_file.file_name)
            if success:
                await query.answer(f"‚úÖ –§–∞–π–ª {lab_file.file_name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
            else:
                await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞")
        except Exception as e:
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞")
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    else:
        await query.answer("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    session.close()

async def add_lab_skip_files(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['lab_files'] = []
    return await add_lab_finish(update, context)

# --- –û—Ç–º–µ–Ω–∞ ---
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

# --- MAIN ---
def main():
    app = Application.builder().token(BOT_TOKEN).build()

    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("admin", admin_panel))
    app.add_handler(CommandHandler("cancel", cancel))
    
    app.add_handler(MessageHandler(filters.Regex("^–ú–æ–∏ –ø—Ä–µ–¥–º–µ—Ç—ã$"), my_subjects))
    app.add_handler(MessageHandler(filters.Regex("^–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å$"), admin_panel))
    app.add_handler(MessageHandler(filters.Regex("^–ê–∫—Ç—É–∞–ª—å–Ω–æ$"), actual_labs))

    # ConversationHandler –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞
    conv_add_subject = ConversationHandler(
        entry_points=[CallbackQueryHandler(add_subject_start, pattern="^add_subject$")],
        states={
            ASK_SUBJECT: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_subject_save)]
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    # ConversationHandler –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è
    conv_notify = ConversationHandler(
        entry_points=[CallbackQueryHandler(notify_start, pattern="^notify$")],
        states={
            ASK_NOTIFY: [MessageHandler(filters.TEXT & ~filters.COMMAND, notify_send)]
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    # ConversationHandler –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π
    conv_add_lab = ConversationHandler(
        entry_points=[CallbackQueryHandler(add_lab_start, pattern="^add_lab$")],
        states={
            ASK_LAB_SUBJECT: [CallbackQueryHandler(add_lab_subject, pattern="^lab_subj:")],
            ASK_LAB_TITLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_lab_title)],
            ASK_LAB_DESC: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_lab_desc)],
            ASK_LAB_DEADLINE: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_lab_deadline)],
            ASK_LAB_FILES: [
                MessageHandler(filters.Document.ALL | filters.PHOTO, add_lab_files),
                CommandHandler("done", add_lab_finish),
                CommandHandler("skip", add_lab_skip_files)
            ]
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    # ConversationHandler –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞
    conv_edit_subject = ConversationHandler(
        entry_points=[CallbackQueryHandler(edit_subject_start, pattern="^edit_subject:")],
        states={
            ASK_EDIT_SUBJECT: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_subject_save)]
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    # –î–æ–±–∞–≤–ª—è–µ–º ConversationHandlers
    app.add_handler(conv_add_subject)
    app.add_handler(conv_notify)
    app.add_handler(conv_add_lab)
    app.add_handler(conv_edit_subject)
    
    # –û–±—ã—á–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º)
    app.add_handler(CallbackQueryHandler(button_handler))

    app.run_polling()

if __name__ == "__main__":
    main()